@page "/results"
@using BlazorApp.Shared
@using System.Web
@inject HttpClient Http

<PageTitle>Results</PageTitle>

<h1>Results</h1>

<div>
@if (isLoading)
{
    <img src="spinner.gif" alt="Loading..." />
}
else
{
    <div hidden="@pictures.Any()">
        <h3>No pictures found</h3>
    </div>
    <div class="row" hidden="@(!pictures.Any())">
        @for (int i = 0; i < pictures.Count; i++)
        {
            int index = i; // Create a local variable and assign the value of i to it
            <div class="col">
                <div class="card" style="width: 18rem;">
                    <img src="@pictures[index].PictureUri" class="card-img-top" alt="@pictures[index].Name">
                    <div class="card-body">
                        <h5 class="card-title">@(index + 1) - @pictures[index].Name (@pictures[index].Rating)</h5>
                        <button class="btn btn-danger" @onclick="() => DeletePic(index)">Delete</button>
                        <button class="btn btn-secondary" @onclick="@(() => OpenModal(index))">Edit</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
</div>

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="margin: auto;">
                <div class="row">
                    <div class="col">
                        <div class="card" style="width: 18rem;">
                            <img src="@editElo.PictureUri" class="card-img-top" alt="@editElo.Name">
                            <div class="card-body">
                                <h5 class="card-title">@editElo.Name</h5>
                                <input type="text" class="form-control" @bind="editedName" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="GetRandomName">Get Random Name</button>
                <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool isLoading = true;
    private List<EloModel> pictures = new();
    private string modalDisplay = "none;";
    private string modalClass = string.Empty;
    private bool showBackdrop = false;
    private EloModel editElo = new();
    private string? editedName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pictures = await Http.GetFromJsonAsync<List<EloModel>>("/api/GetAllElos") ?? new List<EloModel>();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeletePic(int picIndex)
    {
        try
        {
            EloModel eloModel = pictures[picIndex];
            string requestUri = $"/api/DeletePicture?picId={eloModel.PicId}";
            await Http.DeleteAsync(requestUri);
            pictures = await Http.GetFromJsonAsync<List<EloModel>>("/api/GetAllElos") ?? new List<EloModel>();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void OpenModal(int picIndex)
    {
        editElo = pictures[picIndex];
        modalDisplay = "block;";
        modalClass = "Show";
        showBackdrop = true;
        StateHasChanged();
    }

    private async Task GetRandomName()
    {
        editedName = await Http.GetStringAsync("/api/GetRandomCarName") ?? string.Empty;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        if (!string.IsNullOrEmpty(editedName))
        {
            editElo.Name = editedName;
            //const string url = "/api/EditName";
            //Dictionary<string, string> newParams = new() { { "picId", editElo.PicId }, { "name", editedName } };
            //Uri requestUri = new(QueryHelpers.AddQueryString(url, newParams));
            string requestUri = $"/api/EditName?picId={editElo.PicId}&name={HttpUtility.UrlEncode(editedName)}";
            await Http.PostAsync(requestUri, null);
            pictures = await Http.GetFromJsonAsync<List<EloModel>>("/api/GetAllElos") ?? new List<EloModel>();
        }
        CloseModal();
    }

    private void CloseModal()
    {
        editElo = new EloModel();
        editedName = string.Empty;
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
        StateHasChanged();
    }
}
